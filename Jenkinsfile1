pipeline {
    agent none 
    parameters {
		string(name: 'REPOURL', description: 'SCM repository url address')
		string(name: 'BRANCH', description: 'branch of repository')
    }

    stages {

        stage('compilers') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    dir 'maven'
                    args '-v $HOME/.m2:$HOME/.m2 -e MAVEN_CONFIG=$HOME/.m2'
                    additionalBuildArgs '--build-arg USER_ID=$(id -u $USER) --build-arg GROUP_ID=$(id -g $USER) --build-arg HOME_DIR=$HOME'
                    }
            }
            steps {
                git url: params.REPOURL, branch: params.BRANCH
                sh 'mvn --version'
                sh 'mvn clean compile'
            }
        }

        stage('spotbugs') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    dir 'spotbugs'
                    args '-v $HOME/.m2:$HOME/.m2 -e MAVEN_CONFIG=$HOME/.m2 -e MAVEN_USER=$HOME'
                    additionalBuildArgs '--build-arg USER_ID=$(id -u $USER) --build-arg GROUP_ID=$(id -g $USER) --build-arg HOME_DIR=$HOME'
                }
            }
            steps {
                sh 'ls ./'
                sh 'whoami'
                sh 'echo $HOME'
                git url: params.REPOURL, branch: params.BRANCH
                sh '/analyzer r --target-dir ./ --mavenCliOpts "--batch-mode -DskipTests=true -Duser.home=$MAVEN_USER" '
                sh 'cp /tmp/SpotBugs.xml ./'
            }
        }
        
        stage('reporting') {
            agent any 

            steps {
                git url: params.REPOURL, branch: params.BRANCH
                sh 'ls ./'
                recordIssues(tools: [spotBugs(pattern: '**/SpotBugs.xml', useRankAsPriority: true)])
            }
        }
   }
}

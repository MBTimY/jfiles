pipeline {
    agent none 

    parameters {
		string(name: 'REPOURL', defaultValue: '', description: 'SCM repository url address')
		string(name: 'BRANCH', defaultValue: '', description: 'branch of repository')
        booleanParam(name: 'MAVEN',  defaultValue: false, description: 'whether dockerhub of private')
        booleanParam(name: 'GRADLE',  defaultValue: false, description: 'whether dockerhub of private')
        booleanParam(name: 'PYTHON3',  defaultValue: false, description: 'whether dockerhub of private')
        string(name: 'PYTHONDEPENDENCYNAME', defaultValue: 'requirement.txt', description: 'The dependency file of python')
        booleanParam(name: 'NODEJS',  defaultValue: false, description: 'whether dockerhub of private')
    }

    stages {
        stage('synkMaven') {

            when {
                expression { return params.MAVEN}
            }

            agent {
                dockerfile {
                    filename 'DockerfileMaven'
                    dir 'synk'
                    args '-u 0 -e "SNYK_TOKEN=459c86ba-35dc-435a-a20f-f3d80592b1ab" -e "USER_ID=1000" -e "MONITOR=true"  -v "$HOME/.m2:/home/node/.m2"  -v "$HOME/.ivy2:/home/node/.ivy2"'
                }
            }

            steps {
                sh 'id'
                git url: params.REPOURL, branch: params.BRANCH
                sh 'export PROJECT_PATH=`pwd` && cd /home/node && ./docker-entrypoint.sh test --org=mbtimy'
            }
        }

        stage('synkGradle') {

            when {
                expression { return params.GRADLE}
            }

            agent {
                dockerfile {
                    filename 'DockerfileGradle'
                    dir 'synk'
                    args '-u 0 -e "SNYK_TOKEN=459c86ba-35dc-435a-a20f-f3d80592b1ab" -e "USER_ID=1000" -e "MONITOR=true"  -v "$HOME/.gradle:/home/node/.gradle"'
                }
            }

            steps {
                sh 'id'
                git url: params.REPOURL, branch: params.BRANCH
                sh 'export PROJECT_PATH=`pwd` && cd /home/node && ./docker-entrypoint.sh test --org=mbtimy'
            }
        }

        stage('synkPython3') {

            when {
                expression { return params.PYTHON3}
            }

            environment {
                TARGET_FILE = "${params.PYTHONDEPENDENCYNAME}"
            }

            agent {
                dockerfile {
                    filename 'DockerfilePython'
                    dir 'synk'
                    args '-u 0 -e "SNYK_TOKEN=459c86ba-35dc-435a-a20f-f3d80592b1ab" -e "USER_ID=1000" -e "MONITOR=true"'
                }
            }

            steps {
                sh 'env'
                git url: params.REPOURL, branch: params.BRANCH
                sh 'ls -l'
                sh 'export PROJECT_PATH=`pwd` && cd /home/node && ./docker-entrypoint.sh test --org=mbtimy'
            }
        }

        stage('synkNodejs') {

            when {
                expression { return params.NODEJS}
            }

            agent {
                dockerfile {
                    filename 'DockerfileNodejs'
                    dir 'synk'
                    args '-u 0 -e "SNYK_TOKEN=459c86ba-35dc-435a-a20f-f3d80592b1ab" -e "USER_ID=1000" -e "MONITOR=true"' 
                }
            }

            steps {
                sh 'id'
                git url: params.REPOURL, branch: params.BRANCH
                sh 'export PROJECT_PATH=`pwd` && cd /home/node && ./docker-entrypoint.sh test --org=mbtimy'
            }
        }

   }
}
